% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/validate_primary_key.R
\name{validate_primary_key}
\alias{validate_primary_key}
\title{Validate primary key uniqueness in a dataset}
\usage{
validate_primary_key(
  data,
  key_cols,
  sample_n = 10000,
  full_run = FALSE,
  seed = 1234,
  show_examples = 10
)
}
\arguments{
\item{data}{A data frame to check.}

\item{key_cols}{A character vector of column names that should act as the primary key.}

\item{sample_n}{Integer. Number of rows to sample for validation (if `full_run = FALSE`). Default is 10,000.}

\item{full_run}{Logical. If `TRUE`, checks the entire dataset. Default is `FALSE`.}

\item{seed}{An integer used to seed the random sample (only applies if `full_run = FALSE`). Default is 1234.}

\item{show_examples}{Integer. If duplicates are found, print up to this many example offending key combinations (after de-duplicating). Set to 0 to suppress examples. Default is 10.}
}
\value{
Invisibly returns `NULL`. Prints a success or failure message indicating whether the key uniquely identifies rows.
}
\description{
Checks whether a set of columns uniquely identify rows in a data frame.
Can be run on a full dataset or a sampled subset to improve performance on large data.
}
\details{
- Columns listed in `key_cols` must all exist in `data`.
- If `full_run = FALSE` and the dataset has more than `sample_n` rows, a sample is used.
- Uses `anyDuplicated()` for fast duplicate detection.
- Messages use colored console output (green = valid, red = invalid).
}
\examples{
validate_primary_key(mydata, key_cols = c("student_id", "year"))

}
