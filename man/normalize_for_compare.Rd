% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/normalize_for_compare.R
\name{normalize_for_compare}
\alias{normalize_for_compare}
\title{Normalize schema log values for comparison}
\usage{
normalize_for_compare(df)
}
\arguments{
\item{df}{A data frame containing at least the following columns:
\itemize{
\item \code{table_name}
\item \code{column_name}
\item \code{sql_type}
\item \code{null_flag}
\item \code{is_primary_key}
}}
}
\value{
A data frame with the same columns but with normalized values:
\itemize{
\item Trims whitespace
\item Converts SQL types like \code{decimal(p,0)} and \code{int(n)} to \code{INT}
\item Converts all \code{sql_type}, \code{null_flag}, and \code{is_primary_key} fields to uppercase
}
}
\description{
Standardizes key fields in a schema metadata data frame so that column-by-column comparisons
(e.g., across years) are reliable. This function is typically used before schema diffs or rebuild flagging.
}
\details{
\itemize{
\item SQL types are uppercased and simplified for consistent matching
\item NULL flags are standardized to either \code{"NULL"} or \code{"NOT NULL"}
\item Primary key flags are standardized to \code{"YES"} or \code{"NO"}
}
}
\examples{
\dontrun{
normalized <- normalize_for_compare(schema_log)
}

}
