[{"path":"https://github.com/jaubele/cdetidy/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Joseph Aubele. Author, maintainer. Caleb Mitchell. Author. Aubrey Roy. Author.","code":""},{"path":"https://github.com/jaubele/cdetidy/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Aubele J, Mitchell C, Roy (2025). cdetidy: Tools Working CDE Datasets. R package version 0.1.0, https://github.com/jaubele/cdetidy.","code":"@Manual{,   title = {cdetidy: Tools for Working with CDE Datasets},   author = {Joseph Aubele and Caleb Mitchell and Aubrey Roy},   year = {2025},   note = {R package version 0.1.0},   url = {https://github.com/jaubele/cdetidy}, }"},{"path":"https://github.com/jaubele/cdetidy/index.html","id":"key-features","dir":"","previous_headings":"","what":"Key Features","title":"Tools for Working with CDE Datasets","text":"Clean validate CDS codes (county, district, school) Apply standardized group labeling across multiple CDE domains (race, grade, subgroup, etc.) Generate log SQL schema definitions warehouse tables Automatically create bulk-insertable flat files logging metadata Detect schema drift across years rebuild planning Clean validate CDS codes (county, district, school) Apply standardized group labeling across multiple CDE domains (race, grade, subgroup, etc.) Generate log SQL schema definitions warehouse tables Automatically create bulk-insertable flat files logging metadata Detect schema drift across years rebuild planning QA utilities checking primary keys, suppression rules, table structure Functions included can assist ETL process CDE data","code":""},{"path":"https://github.com/jaubele/cdetidy/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Tools for Working with CDE Datasets","text":"```r install.packages(“devtools”) # already installed devtools::install_github(“jaubele/cdetidy”) library(cdetidy)","code":""},{"path":"https://github.com/jaubele/cdetidy/reference/verify_padded_cds.html","id":null,"dir":"Reference","previous_headings":"","what":"Verify that CDS and component columns are correctly padded — verify_padded_cds","title":"Verify that CDS and component columns are correctly padded — verify_padded_cds","text":"Checks whether CDS-related columns (`county_code`, `district_code`, `school_code`, `cds`) character type expected number digits (2, 5, 7, 14, respectively). Optionally drops component columns successful validation.","code":""},{"path":"https://github.com/jaubele/cdetidy/reference/verify_padded_cds.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Verify that CDS and component columns are correctly padded — verify_padded_cds","text":"","code":"verify_padded_cds(df, drop_parts = TRUE)"},{"path":"https://github.com/jaubele/cdetidy/reference/verify_padded_cds.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Verify that CDS and component columns are correctly padded — verify_padded_cds","text":"df data frame containing CDS component columns. drop_parts Logical. `TRUE`, removes `county_code`, `district_code`, `school_code` successful validation. Default `TRUE`.","code":""},{"path":"https://github.com/jaubele/cdetidy/reference/verify_padded_cds.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Verify that CDS and component columns are correctly padded — verify_padded_cds","text":"Returns input data frame (possibly columns dropped). Returns `FALSE` (invisibly) validation fails. Messages printed using `cli` package.","code":""},{"path":"https://github.com/jaubele/cdetidy/reference/verify_padded_cds.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Verify that CDS and component columns are correctly padded — verify_padded_cds","text":"- column must present, type character, match expected width. - expected lengths :   - `county_code`: 2 digits   - `district_code`: 5 digits   - `school_code`: 7 digits   - `cds`: 14 digits","code":""},{"path":"https://github.com/jaubele/cdetidy/reference/verify_padded_cds.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Verify that CDS and component columns are correctly padded — verify_padded_cds","text":"","code":"df <- data.frame(   county_code = \"01\",   district_code = \"12345\",   school_code = \"6789012\",   cds = \"01123456789012\",   stringsAsFactors = FALSE ) verify_padded_cds(df) #> Error in purrr::imap(expected_lengths, function(width, col) {    if (!col %in% names(df)) {        return(glue::glue(\"❌ Column '{col}' is missing.\"))    }    values <- df[[col]]    if (!is.character(values)) {        return(glue::glue(\"❌ Column '{col}' is not character (is {typeof(values)}).\"))    }    bad_n <- sum(nchar(values) != width, na.rm = TRUE)    if (bad_n > 0) {        return(glue::glue(\"⚠️ Column '{col}' has {bad_n} rows with incorrect length (expected {width}).\"))    }    NULL}) %>% purrr::compact(): could not find function \"%>%\""},{"path":"https://github.com/jaubele/cdetidy/reference/load_and_compare_files.html","id":null,"dir":"Reference","previous_headings":"","what":"Load, compare, and optionally join multiple files from a folder — load_and_compare_files","title":"Load, compare, and optionally join multiple files from a folder — load_and_compare_files","text":"Searches folder files matching given keywords, loads memory, checks consistency column names order, optionally joins using one several join methods. Designed validating files merging ETL QA process.","code":""},{"path":"https://github.com/jaubele/cdetidy/reference/load_and_compare_files.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Load, compare, and optionally join multiple files from a folder — load_and_compare_files","text":"","code":"load_and_compare_files(   folder,   keywords,   join_method = c(\"bind_rows\", \"left_join\", \"full_join\"),   by = NULL,   recursive = TRUE,   ignore_case = TRUE,   full_names = TRUE,   require_approval_on_diff = TRUE,   force = FALSE,   encoding = NULL,   id_col = \"source_file\",   show_compare_details = TRUE,   also_run_compare_function = FALSE )"},{"path":"https://github.com/jaubele/cdetidy/reference/load_and_compare_files.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Load, compare, and optionally join multiple files from a folder — load_and_compare_files","text":"folder Path folder files searched. keywords character vector keywords match filenames . join_method Join strategy use. One `\"bind_rows\"` (default), `\"left_join\"`, `\"full_join\"`. using join method (`bind_rows`), character vector join keys. Required joins. recursive Logical. `TRUE`, search subdirectories. Default `TRUE`. ignore_case Logical. `TRUE`, ignore case matching filenames. Default `TRUE`. full_names Logical. `TRUE`, return full file paths. Default `TRUE`. require_approval_on_diff Logical. `TRUE` differences column names/order found, prompts user confirmation. Default `TRUE`. force Logical. `TRUE`, override prompts proceed even discrepancies found. Default `FALSE`. encoding Optional. Encoding use reading files (e.g., `\"UTF-8\"`). Default `\"UTF-8\"`. id_col Optional. provided, column added using `bind_rows` indicate source file names. show_compare_details Logical. `TRUE`, prints detailed column comparison results. Default `TRUE`. also_run_compare_function Logical. `TRUE`, function `compare_variable_names()` exists, called file pair.","code":""},{"path":"https://github.com/jaubele/cdetidy/reference/load_and_compare_files.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Load, compare, and optionally join multiple files from a folder — load_and_compare_files","text":"data frame created joining selected files (discrepancies) `NULL` discrepancies found approval denied. `bind_rows` used `id_col`, output include source ID column.","code":""},{"path":"https://github.com/jaubele/cdetidy/reference/load_and_compare_files.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Load, compare, and optionally join multiple files from a folder — load_and_compare_files","text":"- Forces select columns (e.g., `\"cds\"`, `\"county_code\"`, etc.) character type load, present. - Normalizes character encodings UTF-8. - Prompts user resolve column mismatches unless `force = TRUE` run non-interactively.","code":""},{"path":"https://github.com/jaubele/cdetidy/reference/safe_fwrite.html","id":null,"dir":"Reference","previous_headings":"","what":"Safely write a dataset to CSV with metadata logging — safe_fwrite","title":"Safely write a dataset to CSV with metadata logging — safe_fwrite","text":"Writes data frame standardized T drive location (user-defined path), enforces character types specific ID columns, applies optional compression, logs metadata central export log. Supports fact dimension tables validates metadata inputs writing.","code":""},{"path":"https://github.com/jaubele/cdetidy/reference/safe_fwrite.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Safely write a dataset to CSV with metadata logging — safe_fwrite","text":"","code":"safe_fwrite(   data,   path = NULL,   char_cols = c(\"cds\", \"county_code\", \"district_code\", \"school_code\"),   compress = FALSE,   n_check = 6,   log_metadata = NULL,   data_year = NULL,   data_source = NULL,   data_type = NULL,   data_description = NA,   user_note = NA,   table_name = NULL,   dim_description = NULL,   log_path = \"export_log.csv\",   canonical_table_id = NULL,   dimension_type = NULL )"},{"path":"https://github.com/jaubele/cdetidy/reference/safe_fwrite.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Safely write a dataset to CSV with metadata logging — safe_fwrite","text":"data data frame export. path Optional. Full file path write CSV. `NULL`, path generated automatically based metadata. char_cols character vector column names convert character export. Default `c(\"cds\", \"county_code\", \"district_code\", \"school_code\")`. compress Logical. `TRUE`, appends `.gz` filename compresses output. Default `FALSE`. n_check Integer. Number rows preview writing. Default 6. log_metadata named list containing metadata fields, including `data_year`, `data_source`, `data_description`, `user_note`. `NULL`, function uses corresponding individual arguments. data_year year data represents. Required `log_metadata` supplied. data_source short label identifying source data (e.g., `\"CDE\"`, `\"Dashboard\"`, `\"Assessment\"`). data_type short label identifying type data writing (e.g., \"`CAST`\", \"`SBAC`\", \"`Absenteeism`\", dims) data_description short description dataset (e.g., `\"Chronic absenteeism rates subgroup\"`). user_note note describing nature export. Must include `\"fact\"` `\"dim\"` indicate table type. table_name base name output table. dim_description Optional. short label used describe dimension (e.g., `\"race_ethnicity\"`). Appended file name. log_path path export log CSV. Default `\"export_log.csv\"`. canonical_table_id Optional. unique identifier exported table. Defaults `table_name` `NULL`. dimension_type Optional. One `\"universal\"`, `\"annualized\"`, `\"\"`. Applies dimension tables.","code":""},{"path":"https://github.com/jaubele/cdetidy/reference/safe_fwrite.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Safely write a dataset to CSV with metadata logging — safe_fwrite","text":"Invisibly returns `NULL`. function writes data disk logs metadata central log file.","code":""},{"path":"https://github.com/jaubele/cdetidy/reference/safe_fwrite.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Safely write a dataset to CSV with metadata logging — safe_fwrite","text":"- Validates required metadata fields data source types. - Pads dimension codes needed enforces character types key fields. - `log_path` exists, overwrites log entry `canonical_table_id`, otherwise appends new row. - Automatically creates directories needed checks file size writing.","code":""},{"path":"https://github.com/jaubele/cdetidy/reference/archive_schema_log.html","id":null,"dir":"Reference","previous_headings":"","what":"Archive the primary SQL schema log for a given year — archive_schema_log","title":"Archive the primary SQL schema log for a given year — archive_schema_log","text":"Copies current `primary_sql_schema_log.csv` live folder archive folder year included filename. Prevents overwriting unless explicitly allowed.","code":""},{"path":"https://github.com/jaubele/cdetidy/reference/archive_schema_log.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Archive the primary SQL schema log for a given year — archive_schema_log","text":"","code":"archive_schema_log(year, overwrite = FALSE)"},{"path":"https://github.com/jaubele/cdetidy/reference/archive_schema_log.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Archive the primary SQL schema log for a given year — archive_schema_log","text":"year 4-digit year numeric character string. Used name archived file. overwrite Logical. TRUE, allows overwriting existing archive file. Default FALSE.","code":""},{"path":"https://github.com/jaubele/cdetidy/reference/archive_schema_log.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Archive the primary SQL schema log for a given year — archive_schema_log","text":"(Invisibly) path archived schema log file character string.","code":""},{"path":"https://github.com/jaubele/cdetidy/reference/resolve_conflicting_cds.html","id":null,"dir":"Reference","previous_headings":"","what":"Identify and resolve conflicting CDS codes in a dataset — resolve_conflicting_cds","title":"Identify and resolve conflicting CDS codes in a dataset — resolve_conflicting_cds","text":"Wraps `get_conflicting_cds()` `replace_conflicting_cds()` identify duplicate CDS codes span multiple organization levels resolve appending suffix (e.g., `\"9999\"`) school-level (`\"S\"`) CDS codes. resulting dataset preserves uniqueness maintaining traceability.","code":""},{"path":"https://github.com/jaubele/cdetidy/reference/resolve_conflicting_cds.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Identify and resolve conflicting CDS codes in a dataset — resolve_conflicting_cds","text":"","code":"resolve_conflicting_cds(df, cds_col, org_level_col)"},{"path":"https://github.com/jaubele/cdetidy/reference/resolve_conflicting_cds.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Identify and resolve conflicting CDS codes in a dataset — resolve_conflicting_cds","text":"df data frame containing CDS codes organization level indicators. cds_col string specifying column name containing CDS code. org_level_col string specifying column name containing organization level (e.g., `\"C\"`, `\"D\"`, `\"S\"`).","code":""},{"path":"https://github.com/jaubele/cdetidy/reference/resolve_conflicting_cds.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Identify and resolve conflicting CDS codes in a dataset — resolve_conflicting_cds","text":"modified data frame resolved CDS values. `\"conflicting_cds\"` attribute attached returned data frame, containing list detected conflicts.","code":""},{"path":"https://github.com/jaubele/cdetidy/reference/validate_group_mapping_tabyl.html","id":null,"dir":"Reference","previous_headings":"","what":"Validate that an old-to-new group mapping is one-to-one — validate_group_mapping_tabyl","title":"Validate that an old-to-new group mapping is one-to-one — validate_group_mapping_tabyl","text":"Checks whether unique value `old_col` maps exactly one unique value `new_col`, vice versa. Useful validating recode tables, lookup joins, classification maps applying . Uses `janitor::tabyl()` cross-tabulate values ensures row column contains one match.","code":""},{"path":"https://github.com/jaubele/cdetidy/reference/validate_group_mapping_tabyl.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Validate that an old-to-new group mapping is one-to-one — validate_group_mapping_tabyl","text":"","code":"validate_group_mapping_tabyl(data, old_col, new_col)"},{"path":"https://github.com/jaubele/cdetidy/reference/validate_group_mapping_tabyl.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Validate that an old-to-new group mapping is one-to-one — validate_group_mapping_tabyl","text":"data data frame containing columns compared. old_col unquoted name column representing original values (e.g., codes old labels). new_col unquoted name column representing new mapped values.","code":""},{"path":"https://github.com/jaubele/cdetidy/reference/validate_group_mapping_tabyl.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Validate that an old-to-new group mapping is one-to-one — validate_group_mapping_tabyl","text":"Invisibly returns `TRUE` mapping one--one; otherwise `FALSE`. Prints success message valid, detailed messages violations found.","code":""},{"path":"https://github.com/jaubele/cdetidy/reference/validate_group_mapping_tabyl.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Validate that an old-to-new group mapping is one-to-one — validate_group_mapping_tabyl","text":"","code":"if (FALSE) { # \\dontrun{ validate_group_mapping_tabyl(data, old_code, new_label) } # }"},{"path":"https://github.com/jaubele/cdetidy/reference/pad_cds_codes.html","id":null,"dir":"Reference","previous_headings":"","what":"Pad county, district, and school codes and optionally generate CDS — pad_cds_codes","title":"Pad county, district, and school codes and optionally generate CDS — pad_cds_codes","text":"Ensures `county_code`, `district_code`, `school_code` left-padded zeros standard widths (2, 5, 7 digits respectively). Optionally, generates full CDS code concatenating padded columns.","code":""},{"path":"https://github.com/jaubele/cdetidy/reference/pad_cds_codes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pad county, district, and school codes and optionally generate CDS — pad_cds_codes","text":"","code":"pad_cds_codes(   df,   county_col = \"county_code\",   district_col = \"district_code\",   school_col = \"school_code\",   create_cds = TRUE,   cds_col = \"cds\" )"},{"path":"https://github.com/jaubele/cdetidy/reference/pad_cds_codes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pad county, district, and school codes and optionally generate CDS — pad_cds_codes","text":"df data frame containing columns county, district, school codes. county_col name county code column. Default `\"county_code\"`. district_col name district code column. Default `\"district_code\"`. school_col name school code column. Default `\"school_code\"`. create_cds Logical. `TRUE`, creates new CDS column concatenating three parts. Default `TRUE`. cds_col name output CDS column `create_cds = TRUE`. Default `\"cds\"`.","code":""},{"path":"https://github.com/jaubele/cdetidy/reference/pad_cds_codes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pad county, district, and school codes and optionally generate CDS — pad_cds_codes","text":"data frame padded code columns , requested, new CDS column.","code":""},{"path":"https://github.com/jaubele/cdetidy/reference/pad_cds_codes.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Pad county, district, and school codes and optionally generate CDS — pad_cds_codes","text":"","code":"df <- data.frame(county_code = 1, district_code = 23, school_code = 456) pad_cds_codes(df) #> Error in df %>% mutate(`:=`(!!county_col, str_pad(as.character(.data[[county_col]]),     width = 2, side = \"left\", pad = \"0\")), `:=`(!!district_col,     str_pad(as.character(.data[[district_col]]), width = 5, side = \"left\",         pad = \"0\")), `:=`(!!school_col, str_pad(as.character(.data[[school_col]]),     width = 7, side = \"left\", pad = \"0\"))): could not find function \"%>%\""},{"path":"https://github.com/jaubele/cdetidy/reference/sql_foreign_key_coder.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate SQL scripts to add foreign key constraints — sql_foreign_key_coder","title":"Generate SQL scripts to add foreign key constraints — sql_foreign_key_coder","text":"Based schema metadata data frame (e.g., `sql_schema_log()`), function generates T-SQL `ALTER TABLE` statements define foreign key relationships. supports single-column composite key relationships avoids duplicate constraint creation using `EXISTS` checks. output suitable use post-load SQL warehouse scripts.","code":""},{"path":"https://github.com/jaubele/cdetidy/reference/sql_foreign_key_coder.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate SQL scripts to add foreign key constraints — sql_foreign_key_coder","text":"","code":"sql_foreign_key_coder(schema_flagged)"},{"path":"https://github.com/jaubele/cdetidy/reference/sql_foreign_key_coder.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate SQL scripts to add foreign key constraints — sql_foreign_key_coder","text":"schema_flagged data frame containing schema metadata, including following columns: - `table_name`: Name child table - `column_name`: Foreign key column child table - `is_foreign_key`: Logical \"YES\"/\"\" string - `foreign_key_ref`: Reference `\"table(column)\"` `\"table1(col1) | table2(col2)\"` format - `is_primary_key`: Indicates primary key status composite detection","code":""},{"path":"https://github.com/jaubele/cdetidy/reference/sql_foreign_key_coder.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate SQL scripts to add foreign key constraints — sql_foreign_key_coder","text":"character vector SQL `ALTER TABLE` statements define foreign key constraints. statement begins `EXISTS` check avoid duplicate creation.","code":""},{"path":"https://github.com/jaubele/cdetidy/reference/sql_foreign_key_coder.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Generate SQL scripts to add foreign key constraints — sql_foreign_key_coder","text":"- Composite keys supported referenced columns match full PK referenced table. - Names cleaned SQL compatibility using safe alphanumeric formatting. - function uses `glue::glue()` string assembly assumes presence `sql_ident()` quoting identifiers.","code":""},{"path":"https://github.com/jaubele/cdetidy/reference/sql_ident.html","id":null,"dir":"Reference","previous_headings":"","what":"Safely quote SQL Server identifiers — sql_ident","title":"Safely quote SQL Server identifiers — sql_ident","text":"Wraps character string square brackets use SQL Server identifier. Escapes closing brackets within string avoid syntax errors. Useful safely referencing table column names dynamic SQL generation.","code":""},{"path":"https://github.com/jaubele/cdetidy/reference/sql_ident.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Safely quote SQL Server identifiers — sql_ident","text":"","code":"sql_ident(x)"},{"path":"https://github.com/jaubele/cdetidy/reference/sql_ident.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Safely quote SQL Server identifiers — sql_ident","text":"x character vector table column names.","code":""},{"path":"https://github.com/jaubele/cdetidy/reference/sql_ident.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Safely quote SQL Server identifiers — sql_ident","text":"character vector element wrapped square brackets escaped properly.","code":""},{"path":"https://github.com/jaubele/cdetidy/reference/sql_ident.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Safely quote SQL Server identifiers — sql_ident","text":"","code":"sql_ident(\"table\")           # \"[table]\" #> [1] \"[table]\" sql_ident(\"column name\")     # \"[column name]\" #> [1] \"[column name]\" sql_ident(\"some]name\")       # \"[some]]name]\" #> [1] \"[some]]name]\""},{"path":"https://github.com/jaubele/cdetidy/reference/filter_schema_sources.html","id":null,"dir":"Reference","previous_headings":"","what":"Filter a schema log for a specific data source (with optional universal tables) — filter_schema_sources","title":"Filter a schema log for a specific data source (with optional universal tables) — filter_schema_sources","text":"Filters schema metadata table (typically `primary_sql_schema_log.csv`) include rows match specified `data_source`, optionally including \"universal\" dimensions.","code":""},{"path":"https://github.com/jaubele/cdetidy/reference/filter_schema_sources.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Filter a schema log for a specific data source (with optional universal tables) — filter_schema_sources","text":"","code":"filter_schema_sources(schema_df, data_source = NULL, include_universal = TRUE)"},{"path":"https://github.com/jaubele/cdetidy/reference/filter_schema_sources.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Filter a schema log for a specific data source (with optional universal tables) — filter_schema_sources","text":"schema_df data frame representing full schema log, including columns `data_source`, `dimension_type`, `table_name`. data_source string character vector specifying one `\"assessment\"`, `\"cde\"`, `\"dashboard\"`. Required. include_universal Logical. `TRUE`, also includes rows `dimension_type == \"universal\"`. Default `TRUE`.","code":""},{"path":"https://github.com/jaubele/cdetidy/reference/filter_schema_sources.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Filter a schema log for a specific data source (with optional universal tables) — filter_schema_sources","text":"filtered data frame containing schema rows matching specified data source(s), plus universal tables `include_universal = TRUE`.","code":""},{"path":"https://github.com/jaubele/cdetidy/reference/filter_schema_sources.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Filter a schema log for a specific data source (with optional universal tables) — filter_schema_sources","text":"- function normalizes `data_source` labels match schema log. - error matching rows found invalid `data_source` provided. - Useful generating SQL, inserts, table builds scoped single source system.","code":""},{"path":"https://github.com/jaubele/cdetidy/reference/filter_schema_sources.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Filter a schema log for a specific data source (with optional universal tables) — filter_schema_sources","text":"","code":"if (FALSE) { # \\dontrun{ schema_log <- readr::read_csv(\"primary_sql_schema_log.csv\") filtered <- filter_schema_sources(schema_log, data_source = \"assessment\") } # }"},{"path":"https://github.com/jaubele/cdetidy/reference/clear_dim_objects.html","id":null,"dir":"Reference","previous_headings":"","what":"Remove dimension-related objects from the global environment — clear_dim_objects","title":"Remove dimension-related objects from the global environment — clear_dim_objects","text":"Scans global environment objects names begin user-defined `base_string` contain keywords like \"dim\", \"entit\", \"group\", \"label\". optionally removes just displays dry run. Useful cleaning intermediate output objects created ETL report generation.","code":""},{"path":"https://github.com/jaubele/cdetidy/reference/clear_dim_objects.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Remove dimension-related objects from the global environment — clear_dim_objects","text":"","code":"clear_dim_objects(   base_string = NULL,   dry_run = TRUE,   keywords = c(\"dim\", \"entit\", \"group\", \"label\") )"},{"path":"https://github.com/jaubele/cdetidy/reference/clear_dim_objects.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Remove dimension-related objects from the global environment — clear_dim_objects","text":"base_string string targeted object names begin (e.g., `\"ltel19\"`, `\"sbac24\"`). dry_run Logical. `TRUE`, shows objects removed without actually deleting . Default `TRUE`. keywords character vector substrings match within object names. Defaults `c(\"dim\", \"entit\", \"group\", \"label\")`.","code":""},{"path":"https://github.com/jaubele/cdetidy/reference/clear_dim_objects.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Remove dimension-related objects from the global environment — clear_dim_objects","text":"(Invisibly) character vector object names matched filters. `dry_run = FALSE`, objects removed.","code":""},{"path":"https://github.com/jaubele/cdetidy/reference/clear_dim_objects.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Remove dimension-related objects from the global environment — clear_dim_objects","text":"- function uses pattern matching find \"dimension-like\" objects. - searches objects global environment (`.GlobalEnv`). - Useful scripts generate many intermediate tables reporting dashboarding.","code":""},{"path":"https://github.com/jaubele/cdetidy/reference/generate_sql_script.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate a T-SQL script for loading warehouse tables — generate_sql_script","title":"Generate a T-SQL script for loading warehouse tables — generate_sql_script","text":"Builds full SQL script create tables, insert data, apply foreign key constraints based flagged schema log prior-year comparison. script includes metadata tracking, expected object checks, runtime diagnostics bulk loading SQL Server warehouse.","code":""},{"path":"https://github.com/jaubele/cdetidy/reference/generate_sql_script.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate a T-SQL script for loading warehouse tables — generate_sql_script","text":"","code":"generate_sql_script(   prior_year,   combined_folder,   data_source,   schema_log_path = \"T:/Data Warehouse/Warehouse Ready Files/schema_files\" )"},{"path":"https://github.com/jaubele/cdetidy/reference/generate_sql_script.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate a T-SQL script for loading warehouse tables — generate_sql_script","text":"prior_year 4-digit year (numeric character) used locate archived schema log comparison. combined_folder string names folder containing flat files loaded (e.g., `\"2019_2024\"`). data_source string indicating source category (`\"assessment\"`, `\"cde\"`, `\"dashboard\"`). schema_log_path Path folder containing schema logs. Default shared warehouse T drive path.","code":""},{"path":"https://github.com/jaubele/cdetidy/reference/generate_sql_script.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate a T-SQL script for loading warehouse tables — generate_sql_script","text":"Invisibly returns full SQL script single string. Also writes script `.sql` file `schema_log_path` directory filename formatted `<source>_data_warehouse_<combined_folder>.sql`.","code":""},{"path":"https://github.com/jaubele/cdetidy/reference/generate_sql_script.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Generate a T-SQL script for loading warehouse tables — generate_sql_script","text":"- Automatically flags schema differences using `flag_schema_changes()` saves frozen copy schema log. - Assembles full script using `sql_table_coder()`, `sql_insert_coder()`, `sql_foreign_key_coder()`. - Automatically builds declarations expected tables FKs prints progress summary info. - Generates SQL error detection, transaction control, post-run diagnostics.","code":""},{"path":"https://github.com/jaubele/cdetidy/reference/sql_schema_log.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate and log a SQL schema for a data frame — sql_schema_log","title":"Generate and log a SQL schema for a data frame — sql_schema_log","text":"Builds schema definition table data frame inspecting column types, nullability, primary/foreign key indicators. schema saved central log (`primary_sql_schema_log.csv`) individual table-level schema file.","code":""},{"path":"https://github.com/jaubele/cdetidy/reference/sql_schema_log.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate and log a SQL schema for a data frame — sql_schema_log","text":"","code":"sql_schema_log(   data,   table_name,   data_year,   data_source,   user_note = NA,   dim_description = NULL,   max_char = 255,   primary_key = NULL,   foreign_keys = NULL,   canonical_table_id = NULL,   dimension_type = NULL )"},{"path":"https://github.com/jaubele/cdetidy/reference/sql_schema_log.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate and log a SQL schema for a data frame — sql_schema_log","text":"data data frame analyze. table_name base name SQL table. data_year 4-digit year indicating data vintage. data_source string identifying data source (must `\"Assessment\"`, `\"CDE\"`, `\"Dashboard\"`). user_note short note describing data (must include `\"fact\"` `\"dim\"`). dim_description Optional. short label describing dimension content (e.g., `\"race_ethnicity\"`). max_char Maximum length assign character columns (default 255). primary_key character vector column(s) make primary key. foreign_keys named character vector like `c(\"column_name\" = \"ref_table\")`. canonical_table_id Optional. unique ID table. Defaults `table_name`. dimension_type Optional. One `\"universal\"`, `\"annualized\"`, `\"\"` (used dimension tables).","code":""},{"path":"https://github.com/jaubele/cdetidy/reference/sql_schema_log.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate and log a SQL schema for a data frame — sql_schema_log","text":"tibble containing schema definition input data. result also written : - central schema log: `T:/Data Warehouse/schema_files/primary_sql_schema_log.csv` - individual schema file table: `T:/Data Warehouse/schema_files/<year>/<source>/<fact|dim>/<table>_schema.csv`","code":""},{"path":"https://github.com/jaubele/cdetidy/reference/sql_schema_log.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Generate and log a SQL schema for a data frame — sql_schema_log","text":"- Infers SQL column types (`VARCHAR`, `INT`, `DECIMAL`, etc.) based data values. - Enforces uniqueness completeness primary key. - Validates format existence foreign key mappings. - Updates central log replacing existing entries `canonical_table_id`.","code":""},{"path":"https://github.com/jaubele/cdetidy/reference/expand_cds_codes.html","id":null,"dir":"Reference","previous_headings":"","what":"Expand a full CDS code into county, district, and school components — expand_cds_codes","title":"Expand a full CDS code into county, district, and school components — expand_cds_codes","text":"Splits 14-character CDS code component parts: county (2 digits), district (5 digits), school (7 digits). Pads component ensure correct width using leading zeros.","code":""},{"path":"https://github.com/jaubele/cdetidy/reference/expand_cds_codes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Expand a full CDS code into county, district, and school components — expand_cds_codes","text":"","code":"expand_cds_codes(   df,   cds_col = \"cds\",   county_col = \"county_code\",   district_col = \"district_code\",   school_col = \"school_code\" )"},{"path":"https://github.com/jaubele/cdetidy/reference/expand_cds_codes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Expand a full CDS code into county, district, and school components — expand_cds_codes","text":"df data frame containing column full CDS codes. cds_col name CDS column. Default `\"cds\"`. county_col name column store county code. Default `\"county_code\"`. district_col name column store district code. Default `\"district_code\"`. school_col name column store school code. Default `\"school_code\"`.","code":""},{"path":"https://github.com/jaubele/cdetidy/reference/expand_cds_codes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Expand a full CDS code into county, district, and school components — expand_cds_codes","text":"data frame new columns county, district, school codes.","code":""},{"path":"https://github.com/jaubele/cdetidy/reference/expand_cds_codes.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Expand a full CDS code into county, district, and school components — expand_cds_codes","text":"","code":"df <- data.frame(cds = \"01023000400567\") expand_cds_codes(df) #> Error in df %>% mutate(`:=`(!!county_col, str_pad(str_sub(.data[[cds_col]],     1, 2), 2, pad = \"0\")), `:=`(!!district_col, str_pad(str_sub(.data[[cds_col]],     3, 7), 5, pad = \"0\")), `:=`(!!school_col, str_pad(str_sub(.data[[cds_col]],     8, 14), 7, pad = \"0\"))): could not find function \"%>%\""},{"path":"https://github.com/jaubele/cdetidy/reference/export_with_schema.html","id":null,"dir":"Reference","previous_headings":"","what":"Export a dataset with schema logging — export_with_schema","title":"Export a dataset with schema logging — export_with_schema","text":"Safely exports dataset disk logs schema metadata SQL schema log. function wraps `safe_fwrite()` `sql_schema_log()` ensure consistent output documentation table structure downstream use data pipelines warehouses.","code":""},{"path":"https://github.com/jaubele/cdetidy/reference/export_with_schema.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Export a dataset with schema logging — export_with_schema","text":"","code":"export_with_schema(   data,   path = NULL,   table_name,   data_year,   data_source,   data_description,   dim_description = NULL,   user_note,   char_cols = c(\"cds\", \"county_code\", \"district_code\", \"school_code\"),   compress = FALSE,   n_check = 6,   export_log_path = \"T:/Data Warehouse/export_log.csv\",   max_char = 255,   primary_key = NULL,   foreign_keys = NULL,   canonical_table_id = NULL,   dimension_type = NULL )"},{"path":"https://github.com/jaubele/cdetidy/reference/export_with_schema.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Export a dataset with schema logging — export_with_schema","text":"data data frame exported documented. path Optional. file path data saved. `NULL`, path generated internally. table_name valid SQL-style name exported table. data_year 4-digit string number indicating year data. data_source short string describing source data (e.g., `\"CDE\"`, `\"SBAC\"`). data_description human-readable description dataset exported. dim_description Optional. short description dimension tables (applicable). user_note brief note export (e.g., filtering, transformations, versioning). char_cols Character vector column names force character export. Defaults common CDE identifiers. compress Logical. `TRUE`, exports file `.csv.gz`. Default `FALSE`. n_check Integer. Number rows print export preview. Default 6. export_log_path File path export log CSV. Default shared T drive location. max_char Maximum allowed character length string columns schema log. Default 255. primary_key Optional. vector column names representing table's primary key. foreign_keys Optional. named list representing foreign key relationships. canonical_table_id Optional. unique identifier used linking across data products. dimension_type Optional. label describe type dimension (e.g., `\"student\"`, `\"school\"`).","code":""},{"path":"https://github.com/jaubele/cdetidy/reference/export_with_schema.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Export a dataset with schema logging — export_with_schema","text":"Invisibly returns `NULL`. Files written disk, schema logged SQL schema log.","code":""},{"path":"https://github.com/jaubele/cdetidy/reference/sql_table_coder.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate SQL CREATE TABLE statements from schema metadata — sql_table_coder","title":"Generate SQL CREATE TABLE statements from schema metadata — sql_table_coder","text":"Converts flagged schema log (e.g., `sql_schema_log()` `flag_schema_changes()`) SQL `CREATE TABLE` statements table dataset. Includes metadata headers, optional drop--rebuild behavior, primary key constraints.","code":""},{"path":"https://github.com/jaubele/cdetidy/reference/sql_table_coder.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate SQL CREATE TABLE statements from schema metadata — sql_table_coder","text":"","code":"sql_table_coder(schema_flagged)"},{"path":"https://github.com/jaubele/cdetidy/reference/sql_table_coder.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate SQL CREATE TABLE statements from schema metadata — sql_table_coder","text":"schema_flagged data frame representing schema metadata. Must include following columns: - `table_name`, `column_name`, `sql_type`, `null_flag` - `is_primary_key`, `is_foreign_key`, `foreign_key_ref` - `user_note`, `user`, `timestamp`, `rebuild_flag`","code":""},{"path":"https://github.com/jaubele/cdetidy/reference/sql_table_coder.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate SQL CREATE TABLE statements from schema metadata — sql_table_coder","text":"character vector SQL code blocks, one per table, formatted metadata comments valid T-SQL.","code":""},{"path":"https://github.com/jaubele/cdetidy/reference/sql_table_coder.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Generate SQL CREATE TABLE statements from schema metadata — sql_table_coder","text":"- block prefixed detailed comment including created schema, , purpose. - column table `rebuild_flag == 1`, block starts `DROP TABLE EXISTS`. - Otherwise, block wrapped `EXISTS` check avoid duplicate creation. - Primary keys included via `CONSTRAINT pk_<table_name> PRIMARY KEY (...)`.","code":""},{"path":"https://github.com/jaubele/cdetidy/reference/sql_table_coder.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate SQL CREATE TABLE statements from schema metadata — sql_table_coder","text":"","code":"if (FALSE) { # \\dontrun{ schema_log <- readr::read_csv(\"primary_sql_schema_log.csv\") flagged <- flag_schema_changes(schema_log, year = 2023) sql_blocks <- sql_table_coder(flagged) cat(sql_blocks[1]) } # }"},{"path":"https://github.com/jaubele/cdetidy/reference/fk_constraint_names.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate deterministic foreign key constraint names from schema metadata — fk_constraint_names","title":"Generate deterministic foreign key constraint names from schema metadata — fk_constraint_names","text":"Constructs constraint names foreign keys based flagged schema data frame, handling single-column multi-column (composite) foreign key relationships. Returns character vector cleaned deterministic names suitable use SQL table creation scripts.","code":""},{"path":"https://github.com/jaubele/cdetidy/reference/fk_constraint_names.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate deterministic foreign key constraint names from schema metadata — fk_constraint_names","text":"","code":"fk_constraint_names(schema_flagged)"},{"path":"https://github.com/jaubele/cdetidy/reference/fk_constraint_names.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate deterministic foreign key constraint names from schema metadata — fk_constraint_names","text":"schema_flagged data frame containing schema metadata, columns: - `table_name`: name table - `column_name`: name column - `is_primary_key`: \"YES\" \"\" PK status - `is_foreign_key`: \"YES\" \"\" FK status - `foreign_key_ref`: reference target(s), formatted like `\"table(col)\"` `\"table1(col1) | table2(col2)\"`","code":""},{"path":"https://github.com/jaubele/cdetidy/reference/fk_constraint_names.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate deterministic foreign key constraint names from schema metadata — fk_constraint_names","text":"character vector foreign key constraint names. name follows format: - single-column FKs: `fk_<child_table>_<child_column>_<ref_table>` - multi-column composite FKs: `fk_<child_table>_<ref_table>_<ordered_child_cols>`","code":""},{"path":"https://github.com/jaubele/cdetidy/reference/fk_constraint_names.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Generate deterministic foreign key constraint names from schema metadata — fk_constraint_names","text":"- Constraint names made SQL-safe replacing invalid characters underscores. - Composite constraints generated referenced columns match full PK referenced table. - Duplicate malformed references result error.","code":""},{"path":"https://github.com/jaubele/cdetidy/reference/fk_constraint_names.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate deterministic foreign key constraint names from schema metadata — fk_constraint_names","text":"","code":"if (FALSE) { # \\dontrun{ fk_constraint_names(schema_flagged_df) } # }"},{"path":"https://github.com/jaubele/cdetidy/reference/cde_files_group_labeling.html","id":null,"dir":"Reference","previous_headings":"","what":"Apply classification mapping to CDE-style file columns — cde_files_group_labeling","title":"Apply classification mapping to CDE-style file columns — cde_files_group_labeling","text":"Applies hardcoded classification map one columns CDE dataset. input column, function generates new output columns using user-defined prefixes: `<prefix>_label`, `<prefix>_num`, `<prefix>_group_num`, `<prefix>_group`. Interactive prompts used resolve classification values appear multiple entries.","code":""},{"path":"https://github.com/jaubele/cdetidy/reference/cde_files_group_labeling.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Apply classification mapping to CDE-style file columns — cde_files_group_labeling","text":"","code":"cde_files_group_labeling(df, var_names, output_names)"},{"path":"https://github.com/jaubele/cdetidy/reference/cde_files_group_labeling.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Apply classification mapping to CDE-style file columns — cde_files_group_labeling","text":"df data frame containing one columns classify. var_names character vector column names `df` classification applied. output_names character vector prefixes new output columns. Must length `var_names`.","code":""},{"path":"https://github.com/jaubele/cdetidy/reference/cde_files_group_labeling.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Apply classification mapping to CDE-style file columns — cde_files_group_labeling","text":"original data frame new columns added input variable: `<prefix>_label`, `<prefix>_num`, `<prefix>_group_num`, `<prefix>_group`.","code":""},{"path":"https://github.com/jaubele/cdetidy/reference/cde_files_group_labeling.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Apply classification mapping to CDE-style file columns — cde_files_group_labeling","text":"- Classification values (e.g., `\"RB\"`, `\"RE_B\"`, `\"GR46\"`) matched hardcoded classification map. - function interactively prompts user resolve duplicates value appears one group. - error raised input values unmatched.","code":""},{"path":"https://github.com/jaubele/cdetidy/reference/check_suppression_dependency.html","id":null,"dir":"Reference","previous_headings":"","what":"Check suppression dependency across numeric columns — check_suppression_dependency","title":"Check suppression dependency across numeric columns — check_suppression_dependency","text":"Audits data frame suppression behavior (e.g., values represented \"*\") across specified numeric columns. Specifically, checks whether suppression designated \"trigger\" column (e.g., cohort size) consistently applied numeric columns suppressed — common dependency rule public education data releases.","code":""},{"path":"https://github.com/jaubele/cdetidy/reference/check_suppression_dependency.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check suppression dependency across numeric columns — check_suppression_dependency","text":"","code":"check_suppression_dependency(   df,   numeric_cols,   trigger_col = \"cohort_students\",   return_rows = FALSE )"},{"path":"https://github.com/jaubele/cdetidy/reference/check_suppression_dependency.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check suppression dependency across numeric columns — check_suppression_dependency","text":"df data frame check suppression patterns. numeric_cols character vector column names expected contain suppressible numeric values (e.g., counts rates). trigger_col name column control indicate suppression (default `\"cohort_students\"`). return_rows Logical. `TRUE`, function returns suppressed row subsets addition summary. Default `FALSE`.","code":""},{"path":"https://github.com/jaubele/cdetidy/reference/check_suppression_dependency.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check suppression dependency across numeric columns — check_suppression_dependency","text":"tibble summarizing suppression dependencies, list containing summary detailed row subsets `return_rows = TRUE`. summary includes: - `all_trigger_suppressed_in_suppressed_rows`: Logical flag indicating suppressed rows also suppression trigger column. - `only_trigger_suppressed_rows_found`: Count rows trigger column suppressed. - `other_suppressed_when_trigger_not`: Count rows columns suppressed trigger column .","code":""},{"path":"https://github.com/jaubele/cdetidy/reference/safe_fwrite_warehouse.html","id":null,"dir":"Reference","previous_headings":"","what":"Safely write a warehouse-ready CSV file with metadata logging — safe_fwrite_warehouse","title":"Safely write a warehouse-ready CSV file with metadata logging — safe_fwrite_warehouse","text":"Exports data frame standardized warehouse folder structure (e.g., T drive), ensures correct character formatting ID fields, applies optional compression, logs relevant metadata centralized export log. function enforces expected naming structural conventions OCDE’s data warehouse supports fact dimension tables.","code":""},{"path":"https://github.com/jaubele/cdetidy/reference/safe_fwrite_warehouse.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Safely write a warehouse-ready CSV file with metadata logging — safe_fwrite_warehouse","text":"","code":"safe_fwrite_warehouse(   data,   path = NULL,   char_cols = c(\"cds\", \"county_code\", \"district_code\", \"school_code\"),   compress = FALSE,   n_check = 6,   log_metadata = NULL,   data_year = NULL,   data_source = NULL,   data_type = NULL,   data_description = NA,   user_note = NA,   table_name = NULL,   dim_description = NULL,   log_path = \"export_log.csv\",   canonical_table_id = NULL,   dimension_type = NULL )"},{"path":"https://github.com/jaubele/cdetidy/reference/safe_fwrite_warehouse.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Safely write a warehouse-ready CSV file with metadata logging — safe_fwrite_warehouse","text":"data data frame exported. path Optional. full file path write CSV file. `NULL`, default path constructed using metadata fields. char_cols character vector column names force character export. Defaults key ID fields (`cds`, `county_code`, etc.). compress Logical. `TRUE`, writes file gzipped `.csv.gz`. Default `FALSE`. n_check Number rows preview (`fread()`) writing. Default 6. log_metadata Optional. named list containing key metadata: `data_year`, `data_source`, `data_description`, `user_note`. data_year Data year (numeric character) — required `log_metadata` supplied. data_source string describing data source (e.g., `\"CDE\"`, `\"Dashboard\"`). data_type string describing specific data type/origin (e.g., CAST, SBAC, Absenteeism, dim) data_description short description dataset (e.g., `\"Absenteeism summary subgroup\"`). user_note comment describing export context (must include `\"fact\"` `\"dim\"` infer table type). table_name Base name output table. dim_description Optional. short, clean label dimension table (used file name). log_path Path export log CSV file. Default `\"export_log.csv\"` within warehouse structure. canonical_table_id Optional. unique identifier export record. Defaults `table_name`. dimension_type Optional. Type dimension table (`\"universal\"`, `\"annualized\"`, `\"\"`).","code":""},{"path":"https://github.com/jaubele/cdetidy/reference/safe_fwrite_warehouse.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Safely write a warehouse-ready CSV file with metadata logging — safe_fwrite_warehouse","text":"Invisibly returns `NULL`. function writes CSV appends (updates) log entry.","code":""},{"path":"https://github.com/jaubele/cdetidy/reference/safe_fwrite_warehouse.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Safely write a warehouse-ready CSV file with metadata logging — safe_fwrite_warehouse","text":"- Constructs file name form: `<table_name>_<dim_description>_<fact|dim>.csv` - Ensures ID columns (e.g., `cds`) properly coerced character - Automatically creates subdirectories exist - Overwrites existing log entry `canonical_table_id` matches","code":""},{"path":[]},{"path":"https://github.com/jaubele/cdetidy/reference/class_map_to_dim.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert a classification entry into a dimension table row — class_map_to_dim","title":"Convert a classification entry into a dimension table row — class_map_to_dim","text":"Transforms single list entry classification map standardized row inclusion dimension table. output includes group label, numeric ID, group number, group name.","code":""},{"path":"https://github.com/jaubele/cdetidy/reference/class_map_to_dim.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert a classification entry into a dimension table row — class_map_to_dim","text":"","code":"class_map_to_dim(entry)"},{"path":"https://github.com/jaubele/cdetidy/reference/class_map_to_dim.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert a classification entry into a dimension table row — class_map_to_dim","text":"entry list containing classification entry elements: - `label`: character label (e.g., \"Hispanic Latino\") - `num`: numeric code label - `group_num`: numeric ID group category - `group`: character name group category","code":""},{"path":"https://github.com/jaubele/cdetidy/reference/class_map_to_dim.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert a classification entry into a dimension table row — class_map_to_dim","text":"one-row tibble columns: `demo_group`, `demo_group_num`, `demo_group_group_num`, `demo_group_group`.","code":""},{"path":"https://github.com/jaubele/cdetidy/reference/assessment_files_group_labeling.html","id":null,"dir":"Reference","previous_headings":"","what":"Apply classification mapping across multiple assessment file columns — assessment_files_group_labeling","title":"Apply classification mapping across multiple assessment file columns — assessment_files_group_labeling","text":"function applies hardcoded classification map one columns assessment dataset. dynamically adds new variables label, numeric code, group number, group name using user-defined output prefixes. also includes interactive prompts resolve duplicate values appear across multiple classifications. Grade values temporarily recoded match map, restored mapping complete.","code":""},{"path":"https://github.com/jaubele/cdetidy/reference/assessment_files_group_labeling.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Apply classification mapping across multiple assessment file columns — assessment_files_group_labeling","text":"","code":"assessment_files_group_labeling(df, var_names, output_names)"},{"path":"https://github.com/jaubele/cdetidy/reference/assessment_files_group_labeling.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Apply classification mapping across multiple assessment file columns — assessment_files_group_labeling","text":"df data frame containing one columns classify. var_names character vector column names `df` classification applied. output_names character vector prefixes new output columns. Must length `var_names`.","code":""},{"path":"https://github.com/jaubele/cdetidy/reference/assessment_files_group_labeling.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Apply classification mapping across multiple assessment file columns — assessment_files_group_labeling","text":"original data frame new columns added input variable: `<prefix>_label`, `<prefix>_num`, `<prefix>_group_num`, `<prefix>_group`.","code":""},{"path":"https://github.com/jaubele/cdetidy/reference/assessment_files_group_labeling.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Apply classification mapping across multiple assessment file columns — assessment_files_group_labeling","text":"- Values \"grade\" column temporarily recoded match expected numeric keys classification map. - function stop report unmatched values. - Duplicate values across multiple classification entries prompt user choose label assign.","code":""},{"path":"https://github.com/jaubele/cdetidy/reference/replace_conflicting_cds.html","id":null,"dir":"Reference","previous_headings":"","what":"Resolve conflicting CDS codes by appending a suffix to school-level entries — replace_conflicting_cds","title":"Resolve conflicting CDS codes by appending a suffix to school-level entries — replace_conflicting_cds","text":"Detects CDS codes appear multiple organization levels appends `\"9999\"` `cds` code school-level (`\"S\"`) records, allowing dataset preserve uniqueness. typically used resolve ambiguity CDE datasets loading warehouse.","code":""},{"path":"https://github.com/jaubele/cdetidy/reference/replace_conflicting_cds.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Resolve conflicting CDS codes by appending a suffix to school-level entries — replace_conflicting_cds","text":"","code":"replace_conflicting_cds(   df,   conflicting_cds_df,   cds_col = \"cds\",   org_level_col = \"org_level\" )"},{"path":"https://github.com/jaubele/cdetidy/reference/replace_conflicting_cds.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Resolve conflicting CDS codes by appending a suffix to school-level entries — replace_conflicting_cds","text":"df data frame containing CDS column org level column modify. conflicting_cds_df data frame containing list conflicting CDS codes, typically returned `get_conflicting_cds()`. cds_col name column contains CDS code. Default `\"cds\"`. org_level_col name column contains org level. Default `\"org_level\"`.","code":""},{"path":"https://github.com/jaubele/cdetidy/reference/replace_conflicting_cds.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Resolve conflicting CDS codes by appending a suffix to school-level entries — replace_conflicting_cds","text":"data frame updated CDS values. Adds temporary `altered_cds` column marks modified rows `1`.","code":""},{"path":"https://github.com/jaubele/cdetidy/reference/files_by_keywords.html","id":null,"dir":"Reference","previous_headings":"","what":"Search for and select files by keyword from a folder — files_by_keywords","title":"Search for and select files by keyword from a folder — files_by_keywords","text":"Searches specified folder filenames match given keywords, presents interactive menu user select files return.","code":""},{"path":"https://github.com/jaubele/cdetidy/reference/files_by_keywords.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Search for and select files by keyword from a folder — files_by_keywords","text":"","code":"files_by_keywords(   folder,   keywords,   recursive = TRUE,   ignore_case = TRUE,   full_names = TRUE )"},{"path":"https://github.com/jaubele/cdetidy/reference/files_by_keywords.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Search for and select files by keyword from a folder — files_by_keywords","text":"folder string path folder files searched. keywords character vector one keywords match filenames. recursive Logical. `TRUE`, search subdirectories well. Default `TRUE`. ignore_case Logical. `TRUE`, matching case-insensitive. Default `TRUE`. full_names Logical. `TRUE`, returns full paths; otherwise, returns filenames . Default `TRUE`.","code":""},{"path":"https://github.com/jaubele/cdetidy/reference/files_by_keywords.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Search for and select files by keyword from a folder — files_by_keywords","text":"character vector selected file paths. user cancels files match, empty character vector returned.","code":""},{"path":"https://github.com/jaubele/cdetidy/reference/files_by_keywords.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Search for and select files by keyword from a folder — files_by_keywords","text":"- function filters files based whether keyword appears filename (full path). - one files match, user prompted select files number. - keywords match user cancels, nothing returned.","code":""},{"path":"https://github.com/jaubele/cdetidy/reference/split_sbac_test.html","id":null,"dir":"Reference","previous_headings":"","what":"Split SBAC test data into ELA and Math datasets — split_sbac_test","title":"Split SBAC test data into ELA and Math datasets — split_sbac_test","text":"Splits dataset `\"test\"` column (coded 1 = ELA, 2 = Math) two separate data frames. Assigns resulting datasets global environment using names based user-defined base name.","code":""},{"path":"https://github.com/jaubele/cdetidy/reference/split_sbac_test.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Split SBAC test data into ELA and Math datasets — split_sbac_test","text":"","code":"split_sbac_test(data, base_name)"},{"path":"https://github.com/jaubele/cdetidy/reference/split_sbac_test.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Split SBAC test data into ELA and Math datasets — split_sbac_test","text":"data data frame containing `\"test\"` column values `1` (ELA) `2` (Math). base_name base string used generate object names. Resulting objects named `<base_name>_ela` `<base_name>_math`.","code":""},{"path":"https://github.com/jaubele/cdetidy/reference/split_sbac_test.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Split SBAC test data into ELA and Math datasets — split_sbac_test","text":"Invisibly returns list two components: - `ela`: subset rows `test == 1` - `math`: subset rows `test == 2`","code":""},{"path":"https://github.com/jaubele/cdetidy/reference/split_sbac_test.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Split SBAC test data into ELA and Math datasets — split_sbac_test","text":"- Rows `test == 1` assumed ELA records; `test == 2` assumed Math. - Warnings printed unexpected values present either subset. - Resulting datasets assigned global environment descriptive names. - Use `invisible()` suppress printing calling programmatically.","code":""},{"path":"https://github.com/jaubele/cdetidy/reference/split_sbac_test.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Split SBAC test data into ELA and Math datasets — split_sbac_test","text":"","code":"if (FALSE) { # \\dontrun{ split_sbac_test(sbac_data, base_name = \"sbac23\") # Creates sbac23_ela and sbac23_math in your environment } # }"},{"path":"https://github.com/jaubele/cdetidy/reference/export_with_schema_warehouse.html","id":null,"dir":"Reference","previous_headings":"","what":"Export a dataset to the warehouse with schema logging — export_with_schema_warehouse","title":"Export a dataset to the warehouse with schema logging — export_with_schema_warehouse","text":"Safely exports dataset warehouse-ready location logs schema metadata warehouse-specific SQL schema log. function wraps `safe_fwrite_warehouse()` `sql_schema_log_warehouse()` ensure standardized output metadata tracking data warehouse pipeline.","code":""},{"path":"https://github.com/jaubele/cdetidy/reference/export_with_schema_warehouse.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Export a dataset to the warehouse with schema logging — export_with_schema_warehouse","text":"","code":"export_with_schema_warehouse(   data,   path = NULL,   table_name,   data_year,   data_source,   data_description,   dim_description = NULL,   user_note,   char_cols = c(\"cds\", \"county_code\", \"district_code\", \"school_code\"),   compress = FALSE,   n_check = 6,   export_log_path = \"T:/Data Warehouse/Warehouse Ready Files/export_log.csv\",   max_char = 255,   primary_key = NULL,   foreign_keys = NULL,   canonical_table_id = NULL,   dimension_type = NULL )"},{"path":"https://github.com/jaubele/cdetidy/reference/export_with_schema_warehouse.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Export a dataset to the warehouse with schema logging — export_with_schema_warehouse","text":"data data frame exported documented. path Optional. file path data saved. `NULL`, path generated internally. table_name valid SQL-style name exported table. data_year 4-digit string number indicating year data. data_source short string describing source data (e.g., `\"CDE\"`, `\"SBAC\"`). data_description human-readable description dataset exported. dim_description Optional. short description dimension tables (applicable). user_note brief note export (e.g., filtering, transformations, versioning). char_cols Character vector column names force character export. Defaults common CDE identifiers. compress Logical. `TRUE`, exports file `.csv.gz`. Default `FALSE`. n_check Integer. Number rows print export preview. Default 6. export_log_path File path export log CSV. Default warehouse export log T drive. max_char Maximum allowed character length string columns schema log. Default 255. primary_key Optional. vector column names representing table's primary key. foreign_keys Optional. named list representing foreign key relationships. canonical_table_id Optional. unique identifier used linking across data products. dimension_type Optional. label describe type dimension (e.g., `\"student\"`, `\"school\"`).","code":""},{"path":"https://github.com/jaubele/cdetidy/reference/export_with_schema_warehouse.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Export a dataset to the warehouse with schema logging — export_with_schema_warehouse","text":"Invisibly returns `NULL`. Files written disk schema logged warehouse schema log.","code":""},{"path":"https://github.com/jaubele/cdetidy/reference/compare_variable_names.html","id":null,"dir":"Reference","previous_headings":"","what":"Compare column names between two data frames — compare_variable_names","title":"Compare column names between two data frames — compare_variable_names","text":"Compares column names two data frames prints summary whether identical, along specific variables present one . function useful checking schema consistency across datasets, especially ETL QA workflows.","code":""},{"path":"https://github.com/jaubele/cdetidy/reference/compare_variable_names.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compare column names between two data frames — compare_variable_names","text":"","code":"compare_variable_names(df1, df2)"},{"path":"https://github.com/jaubele/cdetidy/reference/compare_variable_names.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compare column names between two data frames — compare_variable_names","text":"df1 first data frame compare. df2 second data frame compare.","code":""},{"path":"https://github.com/jaubele/cdetidy/reference/compare_variable_names.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compare column names between two data frames — compare_variable_names","text":"tibble summarizing comparison (indicating whether columns identical), printed messages describe columns unique data frame. object returned explicitly.","code":""},{"path":"https://github.com/jaubele/cdetidy/reference/compare_variable_names.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compare column names between two data frames — compare_variable_names","text":"","code":"df1 <- data.frame(a = 1, b = 2) df2 <- data.frame(a = 1, c = 3) compare_variable_names(df1, df2) #> Error in tibble(Comparison = paste(name1, \"vs\", name2), Identical = identical_cols): could not find function \"tibble\""},{"path":"https://github.com/jaubele/cdetidy/reference/validate_sql_identifiers.html","id":null,"dir":"Reference","previous_headings":"","what":"Validate SQL-safe table or column names — validate_sql_identifiers","title":"Validate SQL-safe table or column names — validate_sql_identifiers","text":"Checks name character vector follows SQL identifier rules: - Starts letter underscore - Contains letters, numbers, underscores - exceed specified maximum length","code":""},{"path":"https://github.com/jaubele/cdetidy/reference/validate_sql_identifiers.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Validate SQL-safe table or column names — validate_sql_identifiers","text":"","code":"validate_sql_identifiers(   name_vec,   type = c(\"column\", \"table\"),   max_length = 63 )"},{"path":"https://github.com/jaubele/cdetidy/reference/validate_sql_identifiers.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Validate SQL-safe table or column names — validate_sql_identifiers","text":"name_vec character vector names validate. type string indicating type identifier checked. Must `\"column\"` `\"table\"`. Default `\"column\"`. max_length Maximum number characters allowed name. Default 63.","code":""},{"path":"https://github.com/jaubele/cdetidy/reference/validate_sql_identifiers.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Validate SQL-safe table or column names — validate_sql_identifiers","text":"Invisibly returns `NULL`. Raises error invalid names found.","code":""},{"path":"https://github.com/jaubele/cdetidy/reference/validate_sql_identifiers.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Validate SQL-safe table or column names — validate_sql_identifiers","text":"- function enforces safe naming SQL Server PostgreSQL-style identifiers. - Colored error messages printed easier debugging interactive sessions.","code":""},{"path":"https://github.com/jaubele/cdetidy/reference/validate_sql_identifiers.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Validate SQL-safe table or column names — validate_sql_identifiers","text":"","code":"validate_sql_identifiers(c(\"student_id\", \"_school_code\"))  # ✅ valid validate_sql_identifiers(c(\"123bad\", \"with space\"), type = \"column\")  # ❌ will error #> Error in validate_sql_identifiers(c(\"123bad\", \"with space\"), type = \"column\"): ❌ Invalid SQL column name(s): 123bad, with space #> ⚠️ Must start with a letter or underscore, and contain only letters, numbers, or underscores."},{"path":"https://github.com/jaubele/cdetidy/reference/flag_schema_changes.html","id":null,"dir":"Reference","previous_headings":"","what":"Flag schema changes by comparing to a prior-year archive — flag_schema_changes","title":"Flag schema changes by comparing to a prior-year archive — flag_schema_changes","text":"Compares current schema definition archived schema log specified year, flags tables rebuild columns changed SQL type, nullability, primary key status. Adds `rebuild_flag` column original schema data frame.","code":""},{"path":"https://github.com/jaubele/cdetidy/reference/flag_schema_changes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Flag schema changes by comparing to a prior-year archive — flag_schema_changes","text":"","code":"flag_schema_changes(schema_df, year)"},{"path":"https://github.com/jaubele/cdetidy/reference/flag_schema_changes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Flag schema changes by comparing to a prior-year archive — flag_schema_changes","text":"schema_df data frame representing current schema, typically generated table structure. year 4-digit year (numeric character) used locate archived schema log.","code":""},{"path":"https://github.com/jaubele/cdetidy/reference/flag_schema_changes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Flag schema changes by comparing to a prior-year archive — flag_schema_changes","text":"copy `schema_df` added `rebuild_flag` column: - `1` table requires rebuild due schema changes - `0` otherwise","code":""},{"path":"https://github.com/jaubele/cdetidy/reference/flag_schema_changes.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Flag schema changes by comparing to a prior-year archive — flag_schema_changes","text":"- archived schema must exist standardized location T drive. - Column names compared include: `sql_type`, `null_flag`, `is_primary_key`. - Uses internal normalization step (`normalize_for_compare()`) align formats comparison.","code":""},{"path":"https://github.com/jaubele/cdetidy/reference/normalize_for_compare.html","id":null,"dir":"Reference","previous_headings":"","what":"Normalize schema log values for comparison — normalize_for_compare","title":"Normalize schema log values for comparison — normalize_for_compare","text":"Standardizes key fields schema metadata data frame column--column comparisons (e.g., across years) reliable. function typically used schema diffs rebuild flagging.","code":""},{"path":"https://github.com/jaubele/cdetidy/reference/normalize_for_compare.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Normalize schema log values for comparison — normalize_for_compare","text":"","code":"normalize_for_compare(df)"},{"path":"https://github.com/jaubele/cdetidy/reference/normalize_for_compare.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Normalize schema log values for comparison — normalize_for_compare","text":"df data frame containing least following columns: - `table_name` - `column_name` - `sql_type` - `null_flag` - `is_primary_key`","code":""},{"path":"https://github.com/jaubele/cdetidy/reference/normalize_for_compare.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Normalize schema log values for comparison — normalize_for_compare","text":"data frame columns normalized values: - Trims whitespace - Converts SQL types like `decimal(p,0)` `int(n)` `INT` - Converts `sql_type`, `null_flag`, `is_primary_key` fields uppercase","code":""},{"path":"https://github.com/jaubele/cdetidy/reference/normalize_for_compare.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Normalize schema log values for comparison — normalize_for_compare","text":"- SQL types uppercased simplified consistent matching - NULL flags standardized either `\"NULL\"` `\"NULL\"` - Primary key flags standardized `\"YES\"` `\"\"`","code":""},{"path":"https://github.com/jaubele/cdetidy/reference/normalize_for_compare.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Normalize schema log values for comparison — normalize_for_compare","text":"","code":"if (FALSE) { # \\dontrun{ normalized <- normalize_for_compare(schema_log) } # }"},{"path":"https://github.com/jaubele/cdetidy/reference/get_dim_objects.html","id":null,"dir":"Reference","previous_headings":"","what":"List dimension-like objects in the global environment — get_dim_objects","title":"List dimension-like objects in the global environment — get_dim_objects","text":"Searches global environment object names contain dimension-related keywords `\"dim\"`, `\"entit\"`, `\"group\"`, `\"label\"`, returns (excluding known function names).","code":""},{"path":"https://github.com/jaubele/cdetidy/reference/get_dim_objects.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"List dimension-like objects in the global environment — get_dim_objects","text":"","code":"get_dim_objects(keywords = c(\"dim\", \"entit\", \"group\", \"label\"))"},{"path":"https://github.com/jaubele/cdetidy/reference/get_dim_objects.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"List dimension-like objects in the global environment — get_dim_objects","text":"keywords character vector keywords search within object names. Default includes `\"dim\"`, `\"entit\"`, `\"group\"`, `\"label\"`.","code":""},{"path":"https://github.com/jaubele/cdetidy/reference/get_dim_objects.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"List dimension-like objects in the global environment — get_dim_objects","text":"Invisibly returns character vector matching object names. Also prints styled summary using `cli`.","code":""},{"path":"https://github.com/jaubele/cdetidy/reference/get_dim_objects.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"List dimension-like objects in the global environment — get_dim_objects","text":"- Objects matched using keyword-based regular expression. - Known function names excluded results. - function useful interactively auditing dimension-like data frames exist memory.","code":""},{"path":"https://github.com/jaubele/cdetidy/reference/validate_primary_key.html","id":null,"dir":"Reference","previous_headings":"","what":"Validate primary key uniqueness in a dataset — validate_primary_key","title":"Validate primary key uniqueness in a dataset — validate_primary_key","text":"Checks whether set columns uniquely identify rows data frame. Can run full dataset sampled subset improve performance large data.","code":""},{"path":"https://github.com/jaubele/cdetidy/reference/validate_primary_key.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Validate primary key uniqueness in a dataset — validate_primary_key","text":"","code":"validate_primary_key(   data,   key_cols,   sample_n = 10000,   full_run = FALSE,   seed = 1234 )"},{"path":"https://github.com/jaubele/cdetidy/reference/validate_primary_key.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Validate primary key uniqueness in a dataset — validate_primary_key","text":"data data frame check. key_cols character vector column names act primary key. sample_n Integer. Number rows sample validation (`full_run = FALSE`). Default 10,000. full_run Logical. `TRUE`, checks entire dataset. Default `FALSE`. seed integer used seed random sample (applies `full_run = FALSE`). Default 1234.","code":""},{"path":"https://github.com/jaubele/cdetidy/reference/validate_primary_key.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Validate primary key uniqueness in a dataset — validate_primary_key","text":"Invisibly returns `NULL`. Prints success failure message indicating whether key uniquely identifies rows.","code":""},{"path":"https://github.com/jaubele/cdetidy/reference/validate_primary_key.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Validate primary key uniqueness in a dataset — validate_primary_key","text":"- Columns listed `key_cols` must exist `data`. - `full_run = FALSE` dataset `sample_n` rows, sample used. - Uses `anyDuplicated()` fast duplicate detection. - Messages use colored console output (green = valid, red = invalid).","code":""},{"path":"https://github.com/jaubele/cdetidy/reference/validate_primary_key.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Validate primary key uniqueness in a dataset — validate_primary_key","text":"","code":"validate_primary_key(mydata, key_cols = c(\"student_id\", \"year\")) #> Error: object 'mydata' not found"},{"path":"https://github.com/jaubele/cdetidy/reference/dashboard_files_group_labeling.html","id":null,"dir":"Reference","previous_headings":"","what":"Apply dashboard classification mapping to one or more columns — dashboard_files_group_labeling","title":"Apply dashboard classification mapping to one or more columns — dashboard_files_group_labeling","text":"Applies hardcoded classification map one columns dashboard-oriented dataset. input column, function generates new output columns using user-defined prefixes: `<prefix>_label`, `<prefix>_num`, `<prefix>_group_num`, `<prefix>_group`. also interactively resolves duplicate codes appear one group.","code":""},{"path":"https://github.com/jaubele/cdetidy/reference/dashboard_files_group_labeling.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Apply dashboard classification mapping to one or more columns — dashboard_files_group_labeling","text":"","code":"dashboard_files_group_labeling(df, var_names, output_names)"},{"path":"https://github.com/jaubele/cdetidy/reference/dashboard_files_group_labeling.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Apply dashboard classification mapping to one or more columns — dashboard_files_group_labeling","text":"df data frame containing one columns classify. var_names character vector column names `df` classification applied. output_names character vector prefixes new output columns. Must length `var_names`.","code":""},{"path":"https://github.com/jaubele/cdetidy/reference/dashboard_files_group_labeling.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Apply dashboard classification mapping to one or more columns — dashboard_files_group_labeling","text":"original data frame new columns added input variable: `<prefix>_label`, `<prefix>_num`, `<prefix>_group_num`, `<prefix>_group`.","code":""},{"path":"https://github.com/jaubele/cdetidy/reference/dashboard_files_group_labeling.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Apply dashboard classification mapping to one or more columns — dashboard_files_group_labeling","text":"- Classification values like `\"AA\"`, `\"EL\"`, `\"SED\"` matched built-classification map. - Duplicate values across multiple entries prompt user choose label apply. - function raises error input values unmatched.","code":""},{"path":"https://github.com/jaubele/cdetidy/reference/sql_insert_coder.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate SQL BULK INSERT statements for warehouse flat files — sql_insert_coder","title":"Generate SQL BULK INSERT statements for warehouse flat files — sql_insert_coder","text":"Creates character vector `BULK INSERT` SQL statements loading flat files SQL Server tables. Uses metadata flagged schema (e.g., `sql_schema_log()` `flag_schema_changes()`) determine table names file paths, emits standardized SQL bulk-loading.","code":""},{"path":"https://github.com/jaubele/cdetidy/reference/sql_insert_coder.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate SQL BULK INSERT statements for warehouse flat files — sql_insert_coder","text":"","code":"sql_insert_coder(   schema_flagged,   data_base_dir = \"T:/Data Warehouse/Warehouse Ready Files\",   combined_folder = NULL,   universal_folder = \"universal\" )"},{"path":"https://github.com/jaubele/cdetidy/reference/sql_insert_coder.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate SQL BULK INSERT statements for warehouse flat files — sql_insert_coder","text":"schema_flagged data frame containing schema metadata, including columns: - `table_name`: Name table load - `data_source`: Data source type (e.g., `\"CDE\"`, `\"Dashboard\"`, `\"Assessment\"`) - `dimension_type`: Optional type (`\"universal\"` ) determine subfolder structure data_base_dir Root directory data files stored. Default `\"T:/Data Warehouse/Warehouse Ready Files\"`. combined_folder name subdirectory (e.g., `\"2019_2024\"`) contains flat files. Required. universal_folder Folder name universal dimensions. Default `\"universal\"`.","code":""},{"path":"https://github.com/jaubele/cdetidy/reference/sql_insert_coder.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate SQL BULK INSERT statements for warehouse flat files — sql_insert_coder","text":"character vector `BULK INSERT` SQL statements, one per table. statement includes: - Path `.csv` file - Error log configuration - statement increment `@__bulk_executed`","code":""},{"path":"https://github.com/jaubele/cdetidy/reference/sql_insert_coder.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Generate SQL BULK INSERT statements for warehouse flat files — sql_insert_coder","text":"- File paths validated, missing files cause function fail early helpful message. - Uses `sql_ident()` quote table names escapes single quotes file paths. - Assumes CSV files encoded using Windows ANSI (`CODEPAGE = 'ACP'`) start line 2.","code":""},{"path":"https://github.com/jaubele/cdetidy/reference/sql_schema_log_warehouse.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate and log a SQL schema for a data frame — sql_schema_log_warehouse","title":"Generate and log a SQL schema for a data frame — sql_schema_log_warehouse","text":"Builds schema definition table data frame inspecting column types, nullability, primary/foreign key indicators. schema saved central log (`primary_sql_schema_log.csv`) individual table-level schema file.","code":""},{"path":"https://github.com/jaubele/cdetidy/reference/sql_schema_log_warehouse.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate and log a SQL schema for a data frame — sql_schema_log_warehouse","text":"","code":"sql_schema_log_warehouse(   data,   table_name,   data_year,   data_source,   user_note = NA,   dim_description = NULL,   max_char = 255,   primary_key = NULL,   foreign_keys = NULL,   canonical_table_id = NULL,   dimension_type = NULL )"},{"path":"https://github.com/jaubele/cdetidy/reference/sql_schema_log_warehouse.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate and log a SQL schema for a data frame — sql_schema_log_warehouse","text":"data data frame analyze. table_name base name SQL table. data_year 4-digit year indicating data vintage. data_source string identifying data source (must `\"Assessment\"`, `\"CDE\"`, `\"Dashboard\"`). user_note short note describing data (must include `\"fact\"` `\"dim\"`). dim_description Optional. short label describing dimension content (e.g., `\"race_ethnicity\"`). max_char Maximum length assign character columns (default 255). primary_key character vector column(s) make primary key. foreign_keys named character vector like `c(\"column_name\" = \"ref_table\")`. canonical_table_id Optional. unique ID table. Defaults `table_name`. dimension_type Optional. One `\"universal\"`, `\"annualized\"`, `\"\"` (used dimension tables).","code":""},{"path":"https://github.com/jaubele/cdetidy/reference/sql_schema_log_warehouse.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate and log a SQL schema for a data frame — sql_schema_log_warehouse","text":"tibble containing schema definition input data. result also written : - central schema log: `T:/Data Warehouse/schema_files/primary_sql_schema_log.csv` - individual schema file table: `T:/Data Warehouse/schema_files/<year>/<source>/<fact|dim>/<table>_schema.csv`","code":""},{"path":"https://github.com/jaubele/cdetidy/reference/sql_schema_log_warehouse.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Generate and log a SQL schema for a data frame — sql_schema_log_warehouse","text":"- Infers SQL column types (`VARCHAR`, `INT`, `DECIMAL`, etc.) based data values. - Enforces uniqueness completeness primary key. - Validates format existence foreign key mappings. - Updates central log replacing existing entries `canonical_table_id`.","code":""},{"path":"https://github.com/jaubele/cdetidy/reference/get_conflicting_cds.html","id":null,"dir":"Reference","previous_headings":"","what":"Identify CDS codes linked to multiple organization levels — get_conflicting_cds","title":"Identify CDS codes linked to multiple organization levels — get_conflicting_cds","text":"Flags CDS codes associated one organization level (e.g., school, district, county) within dataset — common data integrity issue merging aggregating across org levels.","code":""},{"path":"https://github.com/jaubele/cdetidy/reference/get_conflicting_cds.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Identify CDS codes linked to multiple organization levels — get_conflicting_cds","text":"","code":"get_conflicting_cds(df, cds_col = \"cds\", org_level_col = \"org_level\")"},{"path":"https://github.com/jaubele/cdetidy/reference/get_conflicting_cds.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Identify CDS codes linked to multiple organization levels — get_conflicting_cds","text":"df data frame containing least two columns: CDS code organization level. cds_col string indicating column name contains CDS code. Default `\"cds\"`. org_level_col string indicating column name contains organization level. Default `\"org_level\"`.","code":""},{"path":"https://github.com/jaubele/cdetidy/reference/get_conflicting_cds.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Identify CDS codes linked to multiple organization levels — get_conflicting_cds","text":"data frame one row per conflicting CDS code column `unique_org_levels` indicating many org levels found code.","code":""},{"path":"https://github.com/jaubele/cdetidy/reference/fk_dim.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate foreign key name for a dimension table — fk_dim","title":"Generate foreign key name for a dimension table — fk_dim","text":"Appends suffix `\"_dim\"` given base name, typically represent foreign key column links dimension table.","code":""},{"path":"https://github.com/jaubele/cdetidy/reference/fk_dim.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate foreign key name for a dimension table — fk_dim","text":"","code":"fk_dim(name)"},{"path":"https://github.com/jaubele/cdetidy/reference/fk_dim.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate foreign key name for a dimension table — fk_dim","text":"name character string representing base name dimension (e.g., `\"student\"`, `\"school\"`).","code":""},{"path":"https://github.com/jaubele/cdetidy/reference/fk_dim.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate foreign key name for a dimension table — fk_dim","text":"character string `\"_dim\"` appended (e.g., `\"student_dim\"`).","code":""}]
